#basic import
import os
import datetime
from colorama import Fore

#discord bot
import discord

__token__ = "tokenhere"

#list of searched servers
def get_desired_guild_names():
    with open(os.path.join(os.path.dirname(__file__), "server.txt"), "r", encoding='utf-8') as file:
        desired_guild_names = [line.strip() for line in file]
    return desired_guild_names

def get_time():
    now = datetime.datetime.now()
    current_time = now.strftime("%H:%M:%S")
    return current_time

def get_date():
    today_date = datetime.datetime.now()
    formatted_date = today_date.strftime("%d_%m_%Y")
    return formatted_date

def pprint(text):
    print(f"  {Fore.LIGHTCYAN_EX}[{get_time()}]{Fore.RESET} {Fore.RED}=>{Fore.WHITE} {text}")


# Asynchronous function for obtaining server IDs
async def process_guilds():
    # Variables
    total = 0
    failed = 0
    amount = 0 
    # Function
    pprint("Requesting Server IDs\n")
    try:
        guildsIds = await client.fetch_guilds()
        for guild in guildsIds:
            try:
                guild_id = guild.id
                guild_name = guild.name
                guildObj = client.get_guild(guild_id)

                if guild_name in get_desired_guild_names():

                    pprint(f"Getting channels | Sever: {guild_name}, ID: {guild_id}")

                    
                    for channel in guildObj.text_channels:
                        channel = channel
                        break

                    pprint("Getting Member names")

                    try:
                        
                        if guildObj.member_count < 1000:
                            pprint('Websocket chunk running')
                            members = await guildObj.chunk() 
                        if not members:
                            pprint('Websocket fetch_members running')  
                            members = await guildObj.fetch_members(channels=guildObj.channels, force_scraping=True, delay=1)
                        if not members:
                            pprint('Websocket recent_members running') 
                            members = await guildObj.query_recent_members(limit=10000)
                        if not members:
                            raise Exception('Websocket failed')
                        
                        pprint('Websocket closed')
                        pprint(f"Got {Fore.GREEN}{len(members)}{Fore.RESET} names")

                    except Exception as e:
                        pprint(f"{Fore.RED}[ERROR]{Fore.RESET} Getting member names error: {e}\n")
                        failed += 1
                        continue

                    # Open usernames already saved
                    try: 
                        file_name = os.path.join(os.path.dirname(__file__), "server", f"{guild_name}.txt")

                        if not os.path.exists(file_name):
                            with open(file_name, 'w', encoding='utf-8') as f:
                                f.write("")

                        with open(file_name, 'r', encoding='utf-8', errors='ignore') as f:
                            user_list = f.read().splitlines()
                    except Exception as e:
                        pprint(f"{Fore.RED}[ERROR]{Fore.RESET} Opened usernames already saved error: {e}\n")

                    # Writing user names to file
                    skipped = 0
                    try:
                        for member in members:
                            if member.name not in user_list:
                                with open(file_name, "a", encoding='utf-8') as f:
                                    total += 1
                                    f.write(member.name + "\n")
                                    amount += 1
                            else:
                                skipped += 1

                        if skipped > 0:
                            pprint(f"{skipped} users were not added because they already existed in the file.")

                    except Exception as e:
                        pprint(f"{Fore.RED}[ERROR]{Fore.RESET} Writing user names to file error: {e}\n")
                    
                    finally:
                        pprint(f"Writing user names done for Server {guild_name}\n")

            except Exception as e:
                pprint(f"{Fore.RED}[ERROR]{Fore.RESET} Single server generic error: {e}\n")

        pprint(f"\n\nDone! Total (tried to) save: {Fore.GREEN}{total}\n Failed: {Fore.RED}{failed}{Fore.RESET}\n  {Fore.LIGHTCYAN_EX}[{get_time()}]{Fore.RESET} {Fore.RED}=>{Fore.WHITE} Actual amount in text file: {Fore.GREEN}{amount}")
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        print(f"Error in process_guilds: {e}")

#client
class MyClient(discord.Client):
    
    async def on_ready(self):
        try:
            pprint(f'Logged in as {self.user} (ID: {self.user.id})')
            pprint("Processing of servers begins")
            await process_guilds()
            await client.close()
            
        
        except Exception as e:
            pprint(f"{Fore.RED}[ERROR]{Fore.RESET} {e}")

        print('test')
  
client = MyClient(chunk_guilds_at_startup=False)
client.run(__token__)
