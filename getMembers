#basic import
import os
import datetime
from colorama import Fore

#discord bot
import discord

__token__ = "your_token_here"

# list of searched servers taken directly from a text file 
def get_desired_guild_names():
    with open(os.path.join(os.path.dirname(__file__), "server.txt"), "r", encoding='utf-8') as file:
        desired_guild_names = [line.strip() for line in file]
    return desired_guild_names

def get_time():
    now = datetime.datetime.now()
    current_time = now.strftime("%H:%M:%S")
    return current_time

def get_date():
    today_date = datetime.datetime.now()
    formatted_date = today_date.strftime("%d_%m_%Y")
    return formatted_date

def pprint(text):
    print(f"  {Fore.LIGHTCYAN_EX}[{get_time()}]{Fore.RESET} {Fore.RED}=>{Fore.WHITE} {text}")


# global variables
total = 0
failed = 0
amount = 0

# Asynchronous function for obtaining server IDs
async def process_guilds():
    global total  
    global amount
    global failed 
    print("Requesting Server IDs")
    try:
        guildsIds = await client.fetch_guilds()
        for guild in guildsIds:
            try:
                guild_id = guild.id
                guild_name = guild.name
                guildObj = client.get_guild(guild_id)

                if guild_name in get_desired_guild_names():

                    pprint(f"Getting channels | GUILD: {guild_name}, ID: {guild_id}")

                    for channel in guildObj.text_channels:
                        channel = channel
                        break

                    pprint("Getting names")

                    try:
                        print('websocket running...')
                        members = await (guildObj.chunk() or await guildObj.fetch_members(channels=guildObj.channels, force_scraping=True, delay=1)) 
                        if not members: 
                            members = await guildObj.query_recent_members(limit=10000)
                        if not members:
                            raise Exception('websocket failed')
                        print('Websocket done')
                        pprint(f"Got {Fore.GREEN}{len(members)}{Fore.RESET} names")

                    except Exception as e:
                        pprint(f"{Fore.RED}[ERROR]{Fore.RESET} {e}")
                        continue

                    file_name = os.path.join(os.path.dirname(__file__), "server", f"{guild_name}.txt")

                    if not os.path.exists(file_name):
                        with open(file_name, 'w') as f:
                            f.write("")

                    with open(file_name, 'r') as f:
                        user_list = f.read().splitlines()

                    skipped = 0

                    for member in members:
                        if member.name not in user_list:
                            with open(file_name, "a", encoding='utf-8') as f:
                                total += 1
                                f.write(member.name + "\n")
                                amount += 1
                        else:
                            skipped += 1

                    pprint(f"No {skipped} users were added because they already existed in the file.\n")
                    pprint(f"Done saving {guild_name}\n")

            except Exception as e:
                pprint(f"{Fore.RED}[ERROR]{Fore.RESET} {e}")

        print("End server processing")
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        print(f"Error in process_guilds: {e}")

#client
class MyClient(discord.Client):
    
    async def on_ready(self):
        try:
            print(f'Logged in as {self.user} (ID: {self.user.id})')
            print("Processing of servers begins")
            await process_guilds()
            await client.close()
            pprint(f"\n\nDone! Done! Total (tried to) save: {Fore.GREEN}{total}\n Failed: {Fore.RED}{failed}{Fore.RESET}\n  {Fore.LIGHTCYAN_EX}[{get_time()}]{Fore.RESET} {Fore.RED}=>{Fore.WHITE} Actual amount in text file: {Fore.GREEN}{amount}")
        
        except Exception as e:
            pprint(f"{Fore.RED}[ERROR]{Fore.RESET} {e}")

        print('test')
  
client = MyClient()
client.run(__token__)
